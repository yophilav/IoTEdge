trigger: none
pr: none

# Input:
#   - edgelet & IIS: 
#      - PMC
#      - GitHub
#      - DevOps pipeline (edgebuild, edgerelease)
#   - Images:
#      - MCR
#      - DevOps pipeline (edgebuild, edgerelease)

stages:
  - stage: RunSmokeTest
    displayName: Smoke Test
    # BEARWASHERE -- For the current build pipeline from the previous build edgelet/images artifacts.
    # dependsOn:
    #   - PublishManifests
    #   - BuildPackages
    # condition: |
    #   and
    #   ( 
    #     in(dependencies.PublishManifests.result, 'Succeeded','Skipped', 'SucceededWithIssues'),
    #     in(dependencies.BuildPackages.result, 'Succeeded','Skipped', 'SucceededWithIssues')
    #   )
    # jobs:
    #   - job: ubuntu_2004_msmoby
    #     displayName: Ubuntu 20.04 with iotedge-moby
    #     variables:
    #       verbose: false
    #       os: linux
    #       arch: amd64
    #       artifactName: iotedged-ubuntu20.04-amd64
    #       identityServiceArtifactName: packages_ubuntu-20.04_amd64
    #       identityServicePackageFilter: aziot-identity-service_*_amd64.deb
    #       builtImages: $[ stageDependencies.PublishManifests.PublishManifest.result ]
    #       builtPackages: $[ stageDependencies.BuildPackages.linux.result ]

    # BEARWASHERE -- For other sources edgelet,IIS artifacts
    jobs:
    - job: downloadArtifacts
      displayName: Download Artifacts from GitHub
      pool:
        name: 'Azure-IoT-Edge-1ES-Hosted-Linux'
        demands:
        - ImageOverride -equals agent-aziotedge-ubuntu-18.04-docker
      # BEARWASHERE -- have the test agents download a proper artifact for their OS & arch
      strategy:
        matrix:
          Ubuntu1804-amd64:
            os: ubuntu18.04
            arch: amd64
            ext: deb
            target.iotedged: edgelet/target/release

      steps: 
      - task: Bash@3
        displayName: Download Edgelet GitHub
        condition: true
        # BEARWASHERE -- "edgeletVersion" needs to be a pipeline variable
        inputs:
          targetType: 'inline'
          script: |
            wget https://github.com/Azure/azure-iotedge/releases/download/$(edgeletVersion)/aziot-edge_$(edgeletVersion)-1_$(os)_$(arch).$(ext) -O $(System.ArtifactsDirectory)/aziot-edge_$(edgeletVersion)-1_$(os)_$(arch)_github.$(ext)

      - task: Bash@3
        displayName: Download Edgelet PMC
        condition: true
        # BEARWASHERE -- TODO
        inputs:
          targetType: 'inline'
          script: |
            ####### Helper functions
            get-latest-version-apt()
            {
              # Use the 'apt' to get the latest version string from the linux repository
              # $1 - package name
              # $2 - the Nth latest package (ex. 1 is the latest, 2 is the second latest), Optional
              apt-cache madison $1 | awk -F '|' '{print $2}' | sort --version-sort -r | sed -n ${2:-1}p | tr -d '[:space:]'
            }

            check-matching-version()
            {
              # Compare if ($2) is a substring of ($1)
              # $1 - version string 1 (string)
              # $2 - version string 2 (string)
              if [[ ! "$1" =~ "$2" ]]; then
                echo "[FAIL] Mismatch Version: The latest edgelet package version on linux repo is $1 (expecting: $2)"
                exit 1
              fi
              echo "[PASS] Linux Repository Artifact Version Check ($1)"
              echo ""
            }

            check-file-size-limit()
            {
              # Compare if the incoming file size is within $sizePercentThrehold percent of
              # the golden package standard. That is 
              #  goldenPkgSize*(100-sizePercentThrehold)/100 < incomingPkgSize < goldenPkgSize*(100+sizePercentThrehold)/100
              #
              # $1 - incoming artifact
              # $2 - golden standard artifact
              # $3 - acceptable size difference percentage as a whole integer number

              incomingArtifact=$1
              goldenArtifact=$2
              sizePercentThrehold=$3

              # Check if the is between 0 < sizePercentThrehold < 100
              [[ "$sizePercentThrehold" -lt "100" ]] || { echo "[FAIL] The \$sizePercentThrehold ($sizePercentThrehold) needs to be lesser than 100"; exit 1; }
              [[ "$sizePercentThrehold" -gt "0" ]] || { echo "[FAIL] The \$sizePercentThrehold ($sizePercentThrehold) needs to be greater than 0"; exit 1; }

              # Do the actual size checking
              incomingSize=$(stat -c%s $incomingArtifact)
              goldenSize=$(stat -c%s $goldenArtifact)
              maxAcceptingArtifactSize=$(echo "scale=0; ($goldenSize*$sizePercentThrehold/100)+$goldenSize" | bc)
              [[ "$incomingSize" -lt "$maxAcceptingArtifactSize" ]] || { echo "[FAIL] The current artifact size ($incomingSize) is more than $edgelet.maxPercentAllowed% larger than previous version file ($goldenSize)"; exit 1; }
              minAcceptingArtifactSize=$(echo "scale=0; $goldenSize-($goldenSize*$sizePercentThrehold/100)" | bc)
              [[ "$incomingSize" -gt "$minAcceptingArtifactSize" ]] || { echo "[FAIL] The current artifact size ($incomingSize) is more than $edgelet.maxPercentAllowed% smaller than previous version file ($goldenSize)"; exit 1; }
              echo "[PASS] The current artifact size ($incomingSize) is withing the range $minAcceptingArtifactSize Byte to $maxAcceptingArtifactSize Byte" 
            }

            download-artifact-from-pmc-apt()
            {
              # Download artifact for a package named ($1) using uri acquired by `apt` to a location ($2).
              # Then suffix the name of the artifact with "_pmc".
              #
              # $1 - downloading an artifact for a package name (latest by default)
              #    Note: To download a specific version, the ($1) can be specified as "aziot-edge=1.2.10-1"
              # $2 - target output directory

              pkgName=${1%=*}
              uri=$(apt-get install --reinstall --print-uris -qq $1 | cut -d"'" -f2 | grep "/$pkgName/")
              [[ -z "$uri" ]] && { echo "[FAIL] Package ($1) cannot be found in a known linux repository"; exit 1;}
              artifactName=${uri##*/}
              targetArtifactPath="$(realpath $2)/${artifactName%*.deb}_pmc.deb"
              
              cmd="wget -q $uri -O $targetArtifactPath"
              echo "Running: $cmd"
              $cmd
            }

            setup-config-apt()
            {
              # Download the `apt` config file from the provided uri ($1), install it, and update the apt
              #
              # $1 - uri for the config deb package
              # Ref: https://docs.microsoft.com/en-us/azure/iot-edge/how-to-provision-single-device-linux-symmetric?view=iotedge-2020-11&tabs=azure-portal%2Cubuntu

              wget "$1" -O packages-microsoft-prod.deb
              sudo dpkg -i packages-microsoft-prod.deb
              rm packages-microsoft-prod.deb
              sudo apt-get update
            }

            test-with-artifact()
            {
              # Trying my best to make sure the script can easily be updated to run locally
              pkgName=$1
              artifactPath="$(System.ArtifactsDirectory)"
              gitHubArtifactSuffix="$(edgeletVersion)-1_$(os)_$(arch)_github.$(ext)"
              sizePercentThrehold=$(edgelet.maxPercentAllowed)

              echo "Download PMC artifacts ($pkgName)"
              wgetRespCurrent=$(download-artifact-from-pmc-apt "$pkgName" "$artifactPath")
              echo $wgetRespCurrent
              currentArtifact=${wgetRespCurrent##* }
              echo "[PASS] The artifacts can be downloaded from the Microsoft Linux Package Repository"
              echo "The releasing artifact: $currentArtifact"

              if $(IsCheckPreviousPkg); then
                # Download the previous release artifact for comparison
                wgetRespPrev=$(download-artifact-from-pmc-apt "$pkgName=$(get-latest-version-apt "$pkgName" 2)" "$artifactPath")
                echo $wgetRespPrev
                previousArtifact=${wgetRespPrev##* }
                echo "The previous version artifact: $previousArtifact"

                check-file-size-limit "$currentArtifact" "$previousArtifact" "sizePercentThrehold"

                # Compare the previous and current artifact content diff (by byte)
                if cmp --silent $currentArtifact $previousArtifact; then
                  echo "[FAIL] The current ($currentArtifact) and previous ($previousArtifact) artifacts are identical."
                  exit 1;
                fi
                echo "[PASS] The current and previous artifact version have a different content"
              fi

              # Compare the artifact if github and pmc are the same artifact
              echo ""
              ghArtifact="$(System.ArtifactsDirectory)/aziot-edge_$gitHubArtifactSuffix"
              echo "The artifact from GitHub: $ghArtifact"
              [[ -f "$ghArtifact" ]] || { echo "[FAIL] The artifact from GitHub doesn't exist ($ghArtifact)"; exit 1; }
              if cmp --silent $currentArtifact $ghArtifact; then
                echo "[PASS] The artifact content in PMC and the GitHub are identical."
              else
                echo "[FAIL] The artifact content in PMC and the GitHub are NOT identical."
                exit 1;
              fi
            }

            ####### Main
            if [[ "$(os)" == "ubuntu"* ]]; then
            # Ubuntu
              if [[ "$(os)" == *"20.04" ]]; then
                echo "Setup source artifact repository"
                setup-config-apt "https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb"

                echo ""
              elif [[ "$(os)" == *"18.04" ]]; then
                echo "Setup source artifact repository"
                setup-config-apt "https://packages.microsoft.com/config/ubuntu/18.04/multiarch/packages-microsoft-prod.deb"

                echo "Get the latest version string from linux repository"
                # Note: $latestVersionApt includes the trailing revision: "1.2.10-1"
                latestVersionApt=$(get-latest-version-apt "aziot-edge" 1)
                check-matching-version $latestVersionApt $edgeletVersion

                # BEARWASHERE -- test-with-artifact
                test-with-artifact "aziot-edge"
                

              else
                echo "Unsupported OS: $(os)"
                exit 1;
              fi
            elif [[ "$(os)" == "debian11" ]]; then
            # Debian
              echo "Setup source artifact repository"
              curl https://packages.microsoft.com/config/debian/11/packages-microsoft-prod.deb > ./packages-microsoft-prod.deb
              sudo apt install ./packages-microsoft-prod.deb
              sudo apt-get update
            else
              echo "Unsupported OS: $(os)"
              exit 1;
            fi

    #     - template: ../e2e/templates/e2e-setup.yaml
    #     - template: ../e2e/templates/e2e-run.yaml  