trigger: none
pr: none

# Input:
#   - edgelet & IIS: 
#      - PMC
#      - GitHub
#      - DevOps pipeline (edgebuild, edgerelease)
#   - Images:
#      - MCR
#      - DevOps pipeline (edgebuild, edgerelease)

stages:
  - stage: RunSmokeTest
    displayName: Smoke Test
    # BEARWASHERE -- For the current build pipeline from the previous build edgelet/images artifacts.
    # dependsOn:
    #   - PublishManifests
    #   - BuildPackages
    # condition: |
    #   and
    #   ( 
    #     in(dependencies.PublishManifests.result, 'Succeeded','Skipped', 'SucceededWithIssues'),
    #     in(dependencies.BuildPackages.result, 'Succeeded','Skipped', 'SucceededWithIssues')
    #   )
    # jobs:
    #   - job: ubuntu_2004_msmoby
    #     displayName: Ubuntu 20.04 with iotedge-moby
    #     variables:
    #       verbose: false
    #       os: linux
    #       arch: amd64
    #       artifactName: iotedged-ubuntu20.04-amd64
    #       identityServiceArtifactName: packages_ubuntu-20.04_amd64
    #       identityServicePackageFilter: aziot-identity-service_*_amd64.deb
    #       builtImages: $[ stageDependencies.PublishManifests.PublishManifest.result ]
    #       builtPackages: $[ stageDependencies.BuildPackages.linux.result ]

    # BEARWASHERE -- For other sources edgelet,IIS artifacts
    jobs:
    - job: downloadArtifacts
      displayName: Release Artifact Smoke Tests
      strategy:
        matrix:
          # Debian11-armhf:
          #   pool_name: 'Azure-IoT-Edge-Core'
          #   agent_demands: 'deb11-e2e-tests -equals true'
          #   os: debian11
          #   arch: armhf
          #   ext: deb

          Ubuntu1804-amd64:
            pool_name: 'Azure-IoT-Edge-1ES-Hosted-Linux'
            agent_demands: 'ImageOverride -equals agent-aziotedge-ubuntu-18.04-docker'
            os: ubuntu18.04
            arch: amd64
            ext: deb
          Ubuntu1804-arm64:
            pool_name: 'Azure-IoT-Edge-1ES-Hosted-Linux-Arm64'
            agent_demands: 'ImageOverride -equals agent-aziotedge-ubuntu-18.04-arm64'
            os: ubuntu18.04
            arch: arm64
            ext: deb
          
          Ubuntu2004-amd64:
            pool_name: 'Azure-IoT-Edge-1ES-Hosted-Linux'
            agent_demands: 'ImageOverride -equals agent-aziotedge-ubuntu-20.04-docker'
            os: ubuntu20.04
            arch: amd64
            ext: deb
          Ubuntu2004-arm64:
            pool_name: 'Azure-IoT-Edge-1ES-Hosted-Linux-Arm64'
            agent_demands: 'ImageOverride -equals agent-aziotedge-ubuntu-20.04-arm64'
            os: ubuntu20.04
            arch: arm64
            ext: deb
      pool:
        name: $(pool_name)
        demands:
        - $(agent_demands)

      steps:
      # - task: AzureKeyVault@1
      #   displayName: Get secrets
      #   inputs:
      #     azureSubscription: $(az.subscription)
      #     keyVaultName: $(kv.name)
      #     secretsFilter: >-
      #       GitHubAccessToken
      # - task: Bash@3
      #   displayName: Get Parameters From GitHub
      #   condition: true
      #   name: GitHubParameters
      #   # BEARWASHERE -- "edgeletVersion" needs to be a pipeline variable
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       # Source the scripts and get versions
      #       # BEARWASHERE -- Get the version straight from source files.
      #       sudo chmod +x $(Build.SourcesDirectory)/iotedge/scripts/linux/github/updateLatestVersion.sh
      #       source $(Build.SourcesDirectory)/iotedge/scripts/linux/github/updateLatestVersion.sh
      #       echo "##vso[task.setvariable variable=UsePipelineImageArtifacts;isOutput=true]TRUE"
      #       variables['check_use_artifacts.UsePipelineImageArtifacts']
      #   env:
      #     GITHUB_PAT: "$(GitHubAccessToken)"

      - task: Bash@3
        displayName: Download Edgelet GitHub
        condition: true
        # BEARWASHERE -- "edgeletVersion" needs to be a pipeline variable
        inputs:
          targetType: 'inline'
          script: |
            wget https://github.com/Azure/azure-iotedge/releases/download/$(edgeletVersion)/aziot-edge_$(edgeletVersion)-1_$(os)_$(arch).$(ext) -O $(System.ArtifactsDirectory)/aziot-edge_$(edgeletVersion)-1_$(os)_$(arch)_github.$(ext)
            wget https://github.com/Azure/azure-iotedge/releases/download/$(edgeletVersion)/aziot-identity-service_$(iisVersion)-1_$(os)_$(arch).$(ext) -O $(System.ArtifactsDirectory)/aziot-identity-service_$(iisVersion)-1_$(os)_$(arch)_github.$(ext)

      - task: Bash@3
        displayName: Released Artifacts Smoke Tests
        condition: true
        inputs:
          targetType: 'inline'
          script: |
            ####### Helper functions
            # Source the scripts & Update version files
            sudo chmod +x $(Build.SourcesDirectory)/scripts/linux/smokeTestHelper.sh
            source $(Build.SourcesDirectory)/scripts/linux/smokeTestHelper.sh

            ####### Main
            if [[ "$(os)" == "ubuntu"* ]]; then
            # Ubuntu
              if [[ "$(os)" == *"20.04" ]]; then
                setup-focal-source-apt
                setup-config-apt "https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb"
              elif [[ "$(os)" == *"18.04" ]]; then
                setup-config-apt "https://packages.microsoft.com/config/ubuntu/18.04/multiarch/packages-microsoft-prod.deb"
              else
                echo "Unsupported OS: $(os)"
                exit 1;
              fi
            elif [[ "$(os)" == "debian11" ]]; then
              # Debian
              echo "Setup source artifact repository"
              curl https://packages.microsoft.com/config/debian/11/packages-microsoft-prod.deb > ./packages-microsoft-prod.deb
              sudo apt install ./packages-microsoft-prod.deb
              sudo apt-get update
            else
              echo "Unsupported OS: $(os)"
              exit 1;
            fi

            echo $'\n\n================================================\n\n'
            echo "Aziot-edge"
            test-released-metadata "aziot-edge" "$(edgeletVersion)"
            
            test-released-artifact \
              "aziot-edge" \
              "$(edgeletVersion)" \
              "$(System.ArtifactsDirectory)" \
              "$artifactVersion-1_$(os)_$(arch)_github.$(ext)" \
              "$(edgelet.maxPercentAllowed)" \
              "$(IsCheckPreviousPkg)"

            echo $'\n\n================================================\n\n'
            echo "Aziot-identity-service"
            test-released-metadata "aziot-identity-service" "$(iisVersion)"

            test-released-artifact \
              "aziot-identity-service" \
              "$(iisVersion)" \
              "$(System.ArtifactsDirectory)" \
              "$artifactVersion-1_$(os)_$(arch)_github.$(ext)" \
              "$(edgelet.maxPercentAllowed)" \
              "$(IsCheckPreviousPkg)"

    #     - template: ../e2e/templates/e2e-setup.yaml
    #     - template: ../e2e/templates/e2e-run.yaml  