//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.0.0 (NJsonSchema v9.10.42.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Microsoft.Azure.Devices.Edge.ClientWrapper.Test.Server.Controllers
{
#pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.0.0 (NJsonSchema v9.10.42.0 (Newtonsoft.Json v9.0.0.0))")]
    public interface IController
    {
        /// <param name="api_version">The version of the API.</param>
        /// <param name="name">The name of the module to sign on behalf of. (urlencoded)</param>
        /// <param name="payload">Data to be signed.</param>
        /// <returns>Ok</returns>
        System.Threading.Tasks.Task<SignResponse> SignAsync(string api_version, string name, SignRequest payload);

        /// <param name="api_version">The version of the API.</param>
        /// <param name="name">The name of the module to get certificate. (urlencoded)</param>
        /// <returns>Ok</returns>
        System.Threading.Tasks.Task<CertificateResponse> CreateIdentityCertificateAsync(string api_version, string name);

        /// <param name="api_version">The version of the API.</param>
        /// <param name="name">The name of the module to get certificate. (urlencoded)</param>
        /// <param name="request">Parameters for certificate creation.</param>
        /// <returns>Ok</returns>
        System.Threading.Tasks.Task<CertificateResponse> CreateServerCertificateAsync(string api_version, string name, ServerCertificateRequest request);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.0.0 (NJsonSchema v9.10.42.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class Controller : Microsoft.AspNetCore.Mvc.Controller
    {
        private IController _implementation;

        public Controller(IController implementation)
        {
            _implementation = implementation;
        }

        /// <param name="api_version">The version of the API.</param>
        /// <param name="name">The name of the module to sign on behalf of. (urlencoded)</param>
        /// <param name="payload">Data to be signed.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("modules/{name}/sign")]
        public System.Threading.Tasks.Task<SignResponse> Sign(string api_version, string name, [Microsoft.AspNetCore.Mvc.FromBody] SignRequest payload)
        {
            return _implementation.SignAsync(api_version, name, payload);
        }

        /// <param name="api_version">The version of the API.</param>
        /// <param name="name">The name of the module to get certificate. (urlencoded)</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("modules/{name}/certificate/identity")]
        public System.Threading.Tasks.Task<CertificateResponse> CreateIdentityCertificate(string api_version, string name)
        {
            return _implementation.CreateIdentityCertificateAsync(api_version, name);
        }

        /// <param name="api_version">The version of the API.</param>
        /// <param name="name">The name of the module to get certificate. (urlencoded)</param>
        /// <param name="request">Parameters for certificate creation.</param>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("modules/{name}/certificate/server")]
        public System.Threading.Tasks.Task<CertificateResponse> CreateServerCertificate(string api_version, string name, [Microsoft.AspNetCore.Mvc.FromBody] ServerCertificateRequest request)
        {
            return _implementation.CreateServerCertificateAsync(api_version, name, request);
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SignRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _keyId;
        private SignRequestAlgo? _algo;
        private byte[] _data;

        /// <summary>Name of key to perform sign operation.</summary>
        [Newtonsoft.Json.JsonProperty("keyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KeyId
        {
            get { return _keyId; }
            set
            {
                if (_keyId != value)
                {
                    _keyId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Sign algorithm to be used.</summary>
        [Newtonsoft.Json.JsonProperty("algo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SignRequestAlgo? Algo
        {
            get { return _algo; }
            set
            {
                if (_algo != value)
                {
                    _algo = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Data to be signed.</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Data
        {
            get { return _data; }
            set
            {
                if (_data != value)
                {
                    _data = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SignRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SignRequest>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SignResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private byte[] _digest;

        /// <summary>Signature of the data.</summary>
        [Newtonsoft.Json.JsonProperty("digest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Digest
        {
            get { return _digest; }
            set
            {
                if (_digest != value)
                {
                    _digest = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SignResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SignResponse>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ServerCertificateRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _commonName;
        private System.DateTime? _expiration;

        /// <summary>subject common name</summary>
        [Newtonsoft.Json.JsonProperty("commonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommonName
        {
            get { return _commonName; }
            set
            {
                if (_commonName != value)
                {
                    _commonName = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Certificate expiration date-time (ISO 8601)</summary>
        [Newtonsoft.Json.JsonProperty("expiration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Expiration
        {
            get { return _expiration; }
            set
            {
                if (_expiration != value)
                {
                    _expiration = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ServerCertificateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServerCertificateRequest>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CertificateResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private PrivateKey _privateKey;
        private string _certificate;
        private System.DateTime? _expiration;

        [Newtonsoft.Json.JsonProperty("privateKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrivateKey PrivateKey
        {
            get { return _privateKey; }
            set
            {
                if (_privateKey != value)
                {
                    _privateKey = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Base64 encoded PEM formatted byte array containing the certificate.</summary>
        [Newtonsoft.Json.JsonProperty("certificate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Certificate
        {
            get { return _certificate; }
            set
            {
                if (_certificate != value)
                {
                    _certificate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Certificate expiration date-time (ISO 8601)</summary>
        [Newtonsoft.Json.JsonProperty("expiration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Expiration
        {
            get { return _expiration; }
            set
            {
                if (_expiration != value)
                {
                    _expiration = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CertificateResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CertificateResponse>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PrivateKey : System.ComponentModel.INotifyPropertyChanged
    {
        private PrivateKeyType? _type;
        private string _ref;
        private string _bytes;

        /// <summary>Indicates format of the key (present in PEM formatted bytes or a reference)</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PrivateKeyType? Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Reference to private key.</summary>
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref
        {
            get { return _ref; }
            set
            {
                if (_ref != value)
                {
                    _ref = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Base64 encoded PEM formatted byte array</summary>
        [Newtonsoft.Json.JsonProperty("bytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bytes
        {
            get { return _bytes; }
            set
            {
                if (_bytes != value)
                {
                    _bytes = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PrivateKey FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PrivateKey>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ErrorResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private string _message;

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    _message = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ErrorResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SignRequestAlgo
    {
        [System.Runtime.Serialization.EnumMember(Value = "HMACSHA256")]
        HMACSHA256 = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PrivateKeyType
    {
        [System.Runtime.Serialization.EnumMember(Value = "ref")]
        Ref = 0,

        [System.Runtime.Serialization.EnumMember(Value = "bytes")]
        Bytes = 1,

    }

}
