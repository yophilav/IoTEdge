/*
 * IotHub Gateway Service APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Service
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// BulkRegistryOperationResult : Encapsulates the result of a bulk registry operation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BulkRegistryOperationResult {
    /// Whether or not the operation was successful.
    #[serde(rename = "isSuccessful", skip_serializing_if = "Option::is_none")]
    is_successful: Option<bool>,
    /// If the operation was not successful, this contains an array of DeviceRegistryOperationError objects.
    #[serde(rename = "errors", skip_serializing_if = "Option::is_none")]
    errors: Option<Vec<::models::DeviceRegistryOperationError>>,
    /// If the operation was partially successful, this contains an array of DeviceRegistryOperationWarning objects.
    #[serde(rename = "warnings", skip_serializing_if = "Option::is_none")]
    warnings: Option<Vec<::models::DeviceRegistryOperationWarning>>,
}

impl BulkRegistryOperationResult {
    /// Encapsulates the result of a bulk registry operation.
    pub fn new() -> BulkRegistryOperationResult {
        BulkRegistryOperationResult {
            is_successful: None,
            errors: None,
            warnings: None,
        }
    }

    pub fn set_is_successful(&mut self, is_successful: bool) {
        self.is_successful = Some(is_successful);
    }

    pub fn with_is_successful(mut self, is_successful: bool) -> BulkRegistryOperationResult {
        self.is_successful = Some(is_successful);
        self
    }

    pub fn is_successful(&self) -> Option<&bool> {
        self.is_successful.as_ref()
    }

    pub fn reset_is_successful(&mut self) {
        self.is_successful = None;
    }

    pub fn set_errors(&mut self, errors: Vec<::models::DeviceRegistryOperationError>) {
        self.errors = Some(errors);
    }

    pub fn with_errors(
        mut self,
        errors: Vec<::models::DeviceRegistryOperationError>,
    ) -> BulkRegistryOperationResult {
        self.errors = Some(errors);
        self
    }

    pub fn errors(&self) -> Option<&Vec<::models::DeviceRegistryOperationError>> {
        self.errors.as_ref()
    }

    pub fn reset_errors(&mut self) {
        self.errors = None;
    }

    pub fn set_warnings(&mut self, warnings: Vec<::models::DeviceRegistryOperationWarning>) {
        self.warnings = Some(warnings);
    }

    pub fn with_warnings(
        mut self,
        warnings: Vec<::models::DeviceRegistryOperationWarning>,
    ) -> BulkRegistryOperationResult {
        self.warnings = Some(warnings);
        self
    }

    pub fn warnings(&self) -> Option<&Vec<::models::DeviceRegistryOperationWarning>> {
        self.warnings.as_ref()
    }

    pub fn reset_warnings(&mut self) {
        self.warnings = None;
    }
}
