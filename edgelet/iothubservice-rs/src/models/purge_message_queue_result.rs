/*
 * IotHub Gateway Service APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Service
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PurgeMessageQueueResult : Result of a device message queue purge operation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PurgeMessageQueueResult {
    #[serde(rename = "totalMessagesPurged", skip_serializing_if = "Option::is_none")]
    total_messages_purged: Option<i32>,
    /// The ID of the device whose messages are being purged.
    #[serde(rename = "deviceId", skip_serializing_if = "Option::is_none")]
    device_id: Option<String>,
    /// The ID of the device whose messages are being purged.
    #[serde(rename = "moduleId", skip_serializing_if = "Option::is_none")]
    module_id: Option<String>,
}

impl PurgeMessageQueueResult {
    /// Result of a device message queue purge operation.
    pub fn new() -> PurgeMessageQueueResult {
        PurgeMessageQueueResult {
            total_messages_purged: None,
            device_id: None,
            module_id: None,
        }
    }

    pub fn set_total_messages_purged(&mut self, total_messages_purged: i32) {
        self.total_messages_purged = Some(total_messages_purged);
    }

    pub fn with_total_messages_purged(
        mut self,
        total_messages_purged: i32,
    ) -> PurgeMessageQueueResult {
        self.total_messages_purged = Some(total_messages_purged);
        self
    }

    pub fn total_messages_purged(&self) -> Option<&i32> {
        self.total_messages_purged.as_ref()
    }

    pub fn reset_total_messages_purged(&mut self) {
        self.total_messages_purged = None;
    }

    pub fn set_device_id(&mut self, device_id: String) {
        self.device_id = Some(device_id);
    }

    pub fn with_device_id(mut self, device_id: String) -> PurgeMessageQueueResult {
        self.device_id = Some(device_id);
        self
    }

    pub fn device_id(&self) -> Option<&String> {
        self.device_id.as_ref()
    }

    pub fn reset_device_id(&mut self) {
        self.device_id = None;
    }

    pub fn set_module_id(&mut self, module_id: String) {
        self.module_id = Some(module_id);
    }

    pub fn with_module_id(mut self, module_id: String) -> PurgeMessageQueueResult {
        self.module_id = Some(module_id);
        self
    }

    pub fn module_id(&self) -> Option<&String> {
        self.module_id.as_ref()
    }

    pub fn reset_module_id(&mut self) {
        self.module_id = None;
    }
}
