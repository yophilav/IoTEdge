/*
 * IotHub Gateway Service APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Service
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// QueryResult : The query result.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QueryResult {
    /// The query result type.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    _type: Option<String>,
    /// The query result items, as a collection.
    #[serde(rename = "items", skip_serializing_if = "Option::is_none")]
    items: Option<Vec<Value>>,
    /// Request continuation token.
    #[serde(rename = "continuationToken", skip_serializing_if = "Option::is_none")]
    continuation_token: Option<String>,
}

impl QueryResult {
    /// The query result.
    pub fn new() -> QueryResult {
        QueryResult {
            _type: None,
            items: None,
            continuation_token: None,
        }
    }

    pub fn set__type(&mut self, _type: String) {
        self._type = Some(_type);
    }

    pub fn with__type(mut self, _type: String) -> QueryResult {
        self._type = Some(_type);
        self
    }

    pub fn _type(&self) -> Option<&String> {
        self._type.as_ref()
    }

    pub fn reset__type(&mut self) {
        self._type = None;
    }

    pub fn set_items(&mut self, items: Vec<Value>) {
        self.items = Some(items);
    }

    pub fn with_items(mut self, items: Vec<Value>) -> QueryResult {
        self.items = Some(items);
        self
    }

    pub fn items(&self) -> Option<&Vec<Value>> {
        self.items.as_ref()
    }

    pub fn reset_items(&mut self) {
        self.items = None;
    }

    pub fn set_continuation_token(&mut self, continuation_token: String) {
        self.continuation_token = Some(continuation_token);
    }

    pub fn with_continuation_token(mut self, continuation_token: String) -> QueryResult {
        self.continuation_token = Some(continuation_token);
        self
    }

    pub fn continuation_token(&self) -> Option<&String> {
        self.continuation_token.as_ref()
    }

    pub fn reset_continuation_token(&mut self) {
        self.continuation_token = None;
    }
}
