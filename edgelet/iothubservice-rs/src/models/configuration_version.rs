/*
 * IotHub Gateway Service APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Service
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ConfigurationVersion : Class that represents {Microsoft.Azure.Devices.Cloud.Configuration} on {Microsoft.Azure.Devices.Common.Api.DeviceTwinInfo}  It is a combination of configuration (InternalVersion, type, status) and twin version.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ConfigurationVersion {
    /// Configuration identifier.
    #[serde(rename = "ConfigurationId", skip_serializing_if = "Option::is_none")]
    configuration_id: Option<String>,
    /// Configuration's InternalVersion
    #[serde(rename = "InternalVersion", skip_serializing_if = "Option::is_none")]
    internal_version: Option<String>,
    /// Device Core version (Desired Properties + Tags, doesn't include reported properties version)
    #[serde(rename = "DeviceVersion", skip_serializing_if = "Option::is_none")]
    device_version: Option<i64>,
    /// Type of configuration.
    #[serde(rename = "ConfigurationType", skip_serializing_if = "Option::is_none")]
    configuration_type: Option<String>,
    /// Status of configuration on device.
    #[serde(rename = "Status", skip_serializing_if = "Option::is_none")]
    status: Option<String>,
}

impl ConfigurationVersion {
    /// Class that represents {Microsoft.Azure.Devices.Cloud.Configuration} on {Microsoft.Azure.Devices.Common.Api.DeviceTwinInfo}  It is a combination of configuration (InternalVersion, type, status) and twin version.
    pub fn new() -> ConfigurationVersion {
        ConfigurationVersion {
            configuration_id: None,
            internal_version: None,
            device_version: None,
            configuration_type: None,
            status: None,
        }
    }

    pub fn set_configuration_id(&mut self, configuration_id: String) {
        self.configuration_id = Some(configuration_id);
    }

    pub fn with_configuration_id(mut self, configuration_id: String) -> ConfigurationVersion {
        self.configuration_id = Some(configuration_id);
        self
    }

    pub fn configuration_id(&self) -> Option<&String> {
        self.configuration_id.as_ref()
    }

    pub fn reset_configuration_id(&mut self) {
        self.configuration_id = None;
    }

    pub fn set_internal_version(&mut self, internal_version: String) {
        self.internal_version = Some(internal_version);
    }

    pub fn with_internal_version(mut self, internal_version: String) -> ConfigurationVersion {
        self.internal_version = Some(internal_version);
        self
    }

    pub fn internal_version(&self) -> Option<&String> {
        self.internal_version.as_ref()
    }

    pub fn reset_internal_version(&mut self) {
        self.internal_version = None;
    }

    pub fn set_device_version(&mut self, device_version: i64) {
        self.device_version = Some(device_version);
    }

    pub fn with_device_version(mut self, device_version: i64) -> ConfigurationVersion {
        self.device_version = Some(device_version);
        self
    }

    pub fn device_version(&self) -> Option<&i64> {
        self.device_version.as_ref()
    }

    pub fn reset_device_version(&mut self) {
        self.device_version = None;
    }

    pub fn set_configuration_type(&mut self, configuration_type: String) {
        self.configuration_type = Some(configuration_type);
    }

    pub fn with_configuration_type(mut self, configuration_type: String) -> ConfigurationVersion {
        self.configuration_type = Some(configuration_type);
        self
    }

    pub fn configuration_type(&self) -> Option<&String> {
        self.configuration_type.as_ref()
    }

    pub fn reset_configuration_type(&mut self) {
        self.configuration_type = None;
    }

    pub fn set_status(&mut self, status: String) {
        self.status = Some(status);
    }

    pub fn with_status(mut self, status: String) -> ConfigurationVersion {
        self.status = Some(status);
        self
    }

    pub fn status(&self) -> Option<&String> {
        self.status.as_ref()
    }

    pub fn reset_status(&mut self) {
        self.status = None;
    }
}
