/*
 * IotHub Gateway Service APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Service
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CommandOutcome {
    #[serde(rename = "IsSuccess", skip_serializing_if = "Option::is_none")]
    is_success: Option<bool>,
    #[serde(rename = "Exception", skip_serializing_if = "Option::is_none")]
    exception: Option<Value>,
    #[serde(rename = "CommandResult", skip_serializing_if = "Option::is_none")]
    command_result: Option<Value>,
}

impl CommandOutcome {
    pub fn new() -> CommandOutcome {
        CommandOutcome {
            is_success: None,
            exception: None,
            command_result: None,
        }
    }

    pub fn set_is_success(&mut self, is_success: bool) {
        self.is_success = Some(is_success);
    }

    pub fn with_is_success(mut self, is_success: bool) -> CommandOutcome {
        self.is_success = Some(is_success);
        self
    }

    pub fn is_success(&self) -> Option<&bool> {
        self.is_success.as_ref()
    }

    pub fn reset_is_success(&mut self) {
        self.is_success = None;
    }

    pub fn set_exception(&mut self, exception: Value) {
        self.exception = Some(exception);
    }

    pub fn with_exception(mut self, exception: Value) -> CommandOutcome {
        self.exception = Some(exception);
        self
    }

    pub fn exception(&self) -> Option<&Value> {
        self.exception.as_ref()
    }

    pub fn reset_exception(&mut self) {
        self.exception = None;
    }

    pub fn set_command_result(&mut self, command_result: Value) {
        self.command_result = Some(command_result);
    }

    pub fn with_command_result(mut self, command_result: Value) -> CommandOutcome {
        self.command_result = Some(command_result);
        self
    }

    pub fn command_result(&self) -> Option<&Value> {
        self.command_result.as_ref()
    }

    pub fn reset_command_result(&mut self) {
        self.command_result = None;
    }
}
