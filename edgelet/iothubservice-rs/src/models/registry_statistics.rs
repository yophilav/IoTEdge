/*
 * IotHub Gateway Service APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Service
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RegistryStatistics {
    #[serde(rename = "totalDeviceCount", skip_serializing_if = "Option::is_none")]
    total_device_count: Option<i64>,
    #[serde(rename = "enabledDeviceCount", skip_serializing_if = "Option::is_none")]
    enabled_device_count: Option<i64>,
    #[serde(rename = "disabledDeviceCount", skip_serializing_if = "Option::is_none")]
    disabled_device_count: Option<i64>,
}

impl RegistryStatistics {
    pub fn new() -> RegistryStatistics {
        RegistryStatistics {
            total_device_count: None,
            enabled_device_count: None,
            disabled_device_count: None,
        }
    }

    pub fn set_total_device_count(&mut self, total_device_count: i64) {
        self.total_device_count = Some(total_device_count);
    }

    pub fn with_total_device_count(mut self, total_device_count: i64) -> RegistryStatistics {
        self.total_device_count = Some(total_device_count);
        self
    }

    pub fn total_device_count(&self) -> Option<&i64> {
        self.total_device_count.as_ref()
    }

    pub fn reset_total_device_count(&mut self) {
        self.total_device_count = None;
    }

    pub fn set_enabled_device_count(&mut self, enabled_device_count: i64) {
        self.enabled_device_count = Some(enabled_device_count);
    }

    pub fn with_enabled_device_count(mut self, enabled_device_count: i64) -> RegistryStatistics {
        self.enabled_device_count = Some(enabled_device_count);
        self
    }

    pub fn enabled_device_count(&self) -> Option<&i64> {
        self.enabled_device_count.as_ref()
    }

    pub fn reset_enabled_device_count(&mut self) {
        self.enabled_device_count = None;
    }

    pub fn set_disabled_device_count(&mut self, disabled_device_count: i64) {
        self.disabled_device_count = Some(disabled_device_count);
    }

    pub fn with_disabled_device_count(mut self, disabled_device_count: i64) -> RegistryStatistics {
        self.disabled_device_count = Some(disabled_device_count);
        self
    }

    pub fn disabled_device_count(&self) -> Option<&i64> {
        self.disabled_device_count.as_ref()
    }

    pub fn reset_disabled_device_count(&mut self) {
        self.disabled_device_count = None;
    }
}
