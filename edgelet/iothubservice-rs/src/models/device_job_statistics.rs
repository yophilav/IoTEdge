/*
 * IotHub Gateway Service APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Service
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DeviceJobStatistics : The job counts, e.g., number of failed/succeeded devices

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DeviceJobStatistics {
    /// Number of devices in the job
    #[serde(rename = "deviceCount", skip_serializing_if = "Option::is_none")]
    device_count: Option<i32>,
    /// The number of failed jobs
    #[serde(rename = "failedCount", skip_serializing_if = "Option::is_none")]
    failed_count: Option<i32>,
    /// The number of Successed jobs
    #[serde(rename = "succeededCount", skip_serializing_if = "Option::is_none")]
    succeeded_count: Option<i32>,
    /// The number of running jobs
    #[serde(rename = "runningCount", skip_serializing_if = "Option::is_none")]
    running_count: Option<i32>,
    /// The number of pending (scheduled) jobs
    #[serde(rename = "pendingCount", skip_serializing_if = "Option::is_none")]
    pending_count: Option<i32>,
}

impl DeviceJobStatistics {
    /// The job counts, e.g., number of failed/succeeded devices
    pub fn new() -> DeviceJobStatistics {
        DeviceJobStatistics {
            device_count: None,
            failed_count: None,
            succeeded_count: None,
            running_count: None,
            pending_count: None,
        }
    }

    pub fn set_device_count(&mut self, device_count: i32) {
        self.device_count = Some(device_count);
    }

    pub fn with_device_count(mut self, device_count: i32) -> DeviceJobStatistics {
        self.device_count = Some(device_count);
        self
    }

    pub fn device_count(&self) -> Option<&i32> {
        self.device_count.as_ref()
    }

    pub fn reset_device_count(&mut self) {
        self.device_count = None;
    }

    pub fn set_failed_count(&mut self, failed_count: i32) {
        self.failed_count = Some(failed_count);
    }

    pub fn with_failed_count(mut self, failed_count: i32) -> DeviceJobStatistics {
        self.failed_count = Some(failed_count);
        self
    }

    pub fn failed_count(&self) -> Option<&i32> {
        self.failed_count.as_ref()
    }

    pub fn reset_failed_count(&mut self) {
        self.failed_count = None;
    }

    pub fn set_succeeded_count(&mut self, succeeded_count: i32) {
        self.succeeded_count = Some(succeeded_count);
    }

    pub fn with_succeeded_count(mut self, succeeded_count: i32) -> DeviceJobStatistics {
        self.succeeded_count = Some(succeeded_count);
        self
    }

    pub fn succeeded_count(&self) -> Option<&i32> {
        self.succeeded_count.as_ref()
    }

    pub fn reset_succeeded_count(&mut self) {
        self.succeeded_count = None;
    }

    pub fn set_running_count(&mut self, running_count: i32) {
        self.running_count = Some(running_count);
    }

    pub fn with_running_count(mut self, running_count: i32) -> DeviceJobStatistics {
        self.running_count = Some(running_count);
        self
    }

    pub fn running_count(&self) -> Option<&i32> {
        self.running_count.as_ref()
    }

    pub fn reset_running_count(&mut self) {
        self.running_count = None;
    }

    pub fn set_pending_count(&mut self, pending_count: i32) {
        self.pending_count = Some(pending_count);
    }

    pub fn with_pending_count(mut self, pending_count: i32) -> DeviceJobStatistics {
        self.pending_count = Some(pending_count);
        self
    }

    pub fn pending_count(&self) -> Option<&i32> {
        self.pending_count.as_ref()
    }

    pub fn reset_pending_count(&mut self) {
        self.pending_count = None;
    }
}
