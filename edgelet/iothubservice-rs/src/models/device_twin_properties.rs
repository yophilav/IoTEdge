/*
 * IotHub Gateway Service APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Service
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DeviceTwinProperties : Represents 'desired/reported properties' in DeviceTwin model

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DeviceTwinProperties {
    #[serde(rename = "Version", skip_serializing_if = "Option::is_none")]
    version: Option<i64>,
    #[serde(rename = "Properties", skip_serializing_if = "Option::is_none")]
    properties: Option<::std::collections::HashMap<String, Value>>,
    #[serde(rename = "Metadata", skip_serializing_if = "Option::is_none")]
    metadata: Option<::models::Metadata>,
}

impl DeviceTwinProperties {
    /// Represents 'desired/reported properties' in DeviceTwin model
    pub fn new() -> DeviceTwinProperties {
        DeviceTwinProperties {
            version: None,
            properties: None,
            metadata: None,
        }
    }

    pub fn set_version(&mut self, version: i64) {
        self.version = Some(version);
    }

    pub fn with_version(mut self, version: i64) -> DeviceTwinProperties {
        self.version = Some(version);
        self
    }

    pub fn version(&self) -> Option<&i64> {
        self.version.as_ref()
    }

    pub fn reset_version(&mut self) {
        self.version = None;
    }

    pub fn set_properties(&mut self, properties: ::std::collections::HashMap<String, Value>) {
        self.properties = Some(properties);
    }

    pub fn with_properties(
        mut self,
        properties: ::std::collections::HashMap<String, Value>,
    ) -> DeviceTwinProperties {
        self.properties = Some(properties);
        self
    }

    pub fn properties(&self) -> Option<&::std::collections::HashMap<String, Value>> {
        self.properties.as_ref()
    }

    pub fn reset_properties(&mut self) {
        self.properties = None;
    }

    pub fn set_metadata(&mut self, metadata: ::models::Metadata) {
        self.metadata = Some(metadata);
    }

    pub fn with_metadata(mut self, metadata: ::models::Metadata) -> DeviceTwinProperties {
        self.metadata = Some(metadata);
        self
    }

    pub fn metadata(&self) -> Option<&::models::Metadata> {
        self.metadata.as_ref()
    }

    pub fn reset_metadata(&mut self) {
        self.metadata = None;
    }
}
