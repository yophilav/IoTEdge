/*
 * IotHub Gateway Service APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Service
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TwinContent {
    #[serde(rename = "TargetPropertyPath", skip_serializing_if = "Option::is_none")]
    target_property_path: Option<String>,
    #[serde(rename = "TargetContent", skip_serializing_if = "Option::is_none")]
    target_content: Option<::models::VariantValue>,
    #[serde(rename = "PropertyNamesListFromRoot", skip_serializing_if = "Option::is_none")]
    property_names_list_from_root: Option<Vec<String>>,
}

impl TwinContent {
    pub fn new() -> TwinContent {
        TwinContent {
            target_property_path: None,
            target_content: None,
            property_names_list_from_root: None,
        }
    }

    pub fn set_target_property_path(&mut self, target_property_path: String) {
        self.target_property_path = Some(target_property_path);
    }

    pub fn with_target_property_path(mut self, target_property_path: String) -> TwinContent {
        self.target_property_path = Some(target_property_path);
        self
    }

    pub fn target_property_path(&self) -> Option<&String> {
        self.target_property_path.as_ref()
    }

    pub fn reset_target_property_path(&mut self) {
        self.target_property_path = None;
    }

    pub fn set_target_content(&mut self, target_content: ::models::VariantValue) {
        self.target_content = Some(target_content);
    }

    pub fn with_target_content(mut self, target_content: ::models::VariantValue) -> TwinContent {
        self.target_content = Some(target_content);
        self
    }

    pub fn target_content(&self) -> Option<&::models::VariantValue> {
        self.target_content.as_ref()
    }

    pub fn reset_target_content(&mut self) {
        self.target_content = None;
    }

    pub fn set_property_names_list_from_root(
        &mut self,
        property_names_list_from_root: Vec<String>,
    ) {
        self.property_names_list_from_root = Some(property_names_list_from_root);
    }

    pub fn with_property_names_list_from_root(
        mut self,
        property_names_list_from_root: Vec<String>,
    ) -> TwinContent {
        self.property_names_list_from_root = Some(property_names_list_from_root);
        self
    }

    pub fn property_names_list_from_root(&self) -> Option<&Vec<String>> {
        self.property_names_list_from_root.as_ref()
    }

    pub fn reset_property_names_list_from_root(&mut self) {
        self.property_names_list_from_root = None;
    }
}
