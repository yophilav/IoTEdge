/*
 * IotHub Gateway Service APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Service
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DeviceRegistryOperationWarning : Encapsulates device registry operation error details.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DeviceRegistryOperationWarning {
    /// The ID of the device that indicated the warning.
    #[serde(rename = "deviceId", skip_serializing_if = "Option::is_none")]
    device_id: Option<String>,
    #[serde(rename = "warningCode", skip_serializing_if = "Option::is_none")]
    warning_code: Option<String>,
    /// Additional details associated with the warning.
    #[serde(rename = "warningStatus", skip_serializing_if = "Option::is_none")]
    warning_status: Option<String>,
}

impl DeviceRegistryOperationWarning {
    /// Encapsulates device registry operation error details.
    pub fn new() -> DeviceRegistryOperationWarning {
        DeviceRegistryOperationWarning {
            device_id: None,
            warning_code: None,
            warning_status: None,
        }
    }

    pub fn set_device_id(&mut self, device_id: String) {
        self.device_id = Some(device_id);
    }

    pub fn with_device_id(mut self, device_id: String) -> DeviceRegistryOperationWarning {
        self.device_id = Some(device_id);
        self
    }

    pub fn device_id(&self) -> Option<&String> {
        self.device_id.as_ref()
    }

    pub fn reset_device_id(&mut self) {
        self.device_id = None;
    }

    pub fn set_warning_code(&mut self, warning_code: String) {
        self.warning_code = Some(warning_code);
    }

    pub fn with_warning_code(mut self, warning_code: String) -> DeviceRegistryOperationWarning {
        self.warning_code = Some(warning_code);
        self
    }

    pub fn warning_code(&self) -> Option<&String> {
        self.warning_code.as_ref()
    }

    pub fn reset_warning_code(&mut self) {
        self.warning_code = None;
    }

    pub fn set_warning_status(&mut self, warning_status: String) {
        self.warning_status = Some(warning_status);
    }

    pub fn with_warning_status(mut self, warning_status: String) -> DeviceRegistryOperationWarning {
        self.warning_status = Some(warning_status);
        self
    }

    pub fn warning_status(&self) -> Option<&String> {
        self.warning_status.as_ref()
    }

    pub fn reset_warning_status(&mut self) {
        self.warning_status = None;
    }
}
