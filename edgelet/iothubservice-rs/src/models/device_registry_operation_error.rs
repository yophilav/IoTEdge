/*
 * IotHub Gateway Service APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Service
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DeviceRegistryOperationError : Encapsulates device registry operation error details.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DeviceRegistryOperationError {
    /// The ID of the device that indicated the error.
    #[serde(rename = "deviceId", skip_serializing_if = "Option::is_none")]
    device_id: Option<String>,
    /// ErrorCode associated with the error.
    #[serde(rename = "errorCode", skip_serializing_if = "Option::is_none")]
    error_code: Option<String>,
    /// Additional details associated with the error.
    #[serde(rename = "errorStatus", skip_serializing_if = "Option::is_none")]
    error_status: Option<String>,
    #[serde(rename = "moduleId", skip_serializing_if = "Option::is_none")]
    module_id: Option<String>,
    #[serde(rename = "operation", skip_serializing_if = "Option::is_none")]
    operation: Option<String>,
}

impl DeviceRegistryOperationError {
    /// Encapsulates device registry operation error details.
    pub fn new() -> DeviceRegistryOperationError {
        DeviceRegistryOperationError {
            device_id: None,
            error_code: None,
            error_status: None,
            module_id: None,
            operation: None,
        }
    }

    pub fn set_device_id(&mut self, device_id: String) {
        self.device_id = Some(device_id);
    }

    pub fn with_device_id(mut self, device_id: String) -> DeviceRegistryOperationError {
        self.device_id = Some(device_id);
        self
    }

    pub fn device_id(&self) -> Option<&String> {
        self.device_id.as_ref()
    }

    pub fn reset_device_id(&mut self) {
        self.device_id = None;
    }

    pub fn set_error_code(&mut self, error_code: String) {
        self.error_code = Some(error_code);
    }

    pub fn with_error_code(mut self, error_code: String) -> DeviceRegistryOperationError {
        self.error_code = Some(error_code);
        self
    }

    pub fn error_code(&self) -> Option<&String> {
        self.error_code.as_ref()
    }

    pub fn reset_error_code(&mut self) {
        self.error_code = None;
    }

    pub fn set_error_status(&mut self, error_status: String) {
        self.error_status = Some(error_status);
    }

    pub fn with_error_status(mut self, error_status: String) -> DeviceRegistryOperationError {
        self.error_status = Some(error_status);
        self
    }

    pub fn error_status(&self) -> Option<&String> {
        self.error_status.as_ref()
    }

    pub fn reset_error_status(&mut self) {
        self.error_status = None;
    }

    pub fn set_module_id(&mut self, module_id: String) {
        self.module_id = Some(module_id);
    }

    pub fn with_module_id(mut self, module_id: String) -> DeviceRegistryOperationError {
        self.module_id = Some(module_id);
        self
    }

    pub fn module_id(&self) -> Option<&String> {
        self.module_id.as_ref()
    }

    pub fn reset_module_id(&mut self) {
        self.module_id = None;
    }

    pub fn set_operation(&mut self, operation: String) {
        self.operation = Some(operation);
    }

    pub fn with_operation(mut self, operation: String) -> DeviceRegistryOperationError {
        self.operation = Some(operation);
        self
    }

    pub fn operation(&self) -> Option<&String> {
        self.operation.as_ref()
    }

    pub fn reset_operation(&mut self) {
        self.operation = None;
    }
}
