/*
 * IotHub Gateway Service APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Service
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// CloudToDeviceMethod : Parameters to execute a direct method on the device

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CloudToDeviceMethod {
    /// Method to run
    #[serde(rename = "methodName", skip_serializing_if = "Option::is_none")]
    method_name: Option<String>,
    /// Payload
    #[serde(rename = "payload", skip_serializing_if = "Option::is_none")]
    payload: Option<Value>,
    #[serde(rename = "responseTimeoutInSeconds", skip_serializing_if = "Option::is_none")]
    response_timeout_in_seconds: Option<i32>,
    #[serde(rename = "connectTimeoutInSeconds", skip_serializing_if = "Option::is_none")]
    connect_timeout_in_seconds: Option<i32>,
}

impl CloudToDeviceMethod {
    /// Parameters to execute a direct method on the device
    pub fn new() -> CloudToDeviceMethod {
        CloudToDeviceMethod {
            method_name: None,
            payload: None,
            response_timeout_in_seconds: None,
            connect_timeout_in_seconds: None,
        }
    }

    pub fn set_method_name(&mut self, method_name: String) {
        self.method_name = Some(method_name);
    }

    pub fn with_method_name(mut self, method_name: String) -> CloudToDeviceMethod {
        self.method_name = Some(method_name);
        self
    }

    pub fn method_name(&self) -> Option<&String> {
        self.method_name.as_ref()
    }

    pub fn reset_method_name(&mut self) {
        self.method_name = None;
    }

    pub fn set_payload(&mut self, payload: Value) {
        self.payload = Some(payload);
    }

    pub fn with_payload(mut self, payload: Value) -> CloudToDeviceMethod {
        self.payload = Some(payload);
        self
    }

    pub fn payload(&self) -> Option<&Value> {
        self.payload.as_ref()
    }

    pub fn reset_payload(&mut self) {
        self.payload = None;
    }

    pub fn set_response_timeout_in_seconds(&mut self, response_timeout_in_seconds: i32) {
        self.response_timeout_in_seconds = Some(response_timeout_in_seconds);
    }

    pub fn with_response_timeout_in_seconds(
        mut self,
        response_timeout_in_seconds: i32,
    ) -> CloudToDeviceMethod {
        self.response_timeout_in_seconds = Some(response_timeout_in_seconds);
        self
    }

    pub fn response_timeout_in_seconds(&self) -> Option<&i32> {
        self.response_timeout_in_seconds.as_ref()
    }

    pub fn reset_response_timeout_in_seconds(&mut self) {
        self.response_timeout_in_seconds = None;
    }

    pub fn set_connect_timeout_in_seconds(&mut self, connect_timeout_in_seconds: i32) {
        self.connect_timeout_in_seconds = Some(connect_timeout_in_seconds);
    }

    pub fn with_connect_timeout_in_seconds(
        mut self,
        connect_timeout_in_seconds: i32,
    ) -> CloudToDeviceMethod {
        self.connect_timeout_in_seconds = Some(connect_timeout_in_seconds);
        self
    }

    pub fn connect_timeout_in_seconds(&self) -> Option<&i32> {
        self.connect_timeout_in_seconds.as_ref()
    }

    pub fn reset_connect_timeout_in_seconds(&mut self) {
        self.connect_timeout_in_seconds = None;
    }
}
