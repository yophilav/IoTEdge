// Copyright (c) Microsoft. All rights reserved.

/*
 * DeviceProvisioningService_DeviceRuntimeClient
 *
 * API for device runtime operations with the Azure IotHub Device Provisioning Service
 *
 * OpenAPI spec version: 2017-11-15
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::default::Default;

/// DeviceRegistration : Device registration.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct DeviceRegistration {
    #[serde(rename = "registrationId", skip_serializing_if = "Option::is_none")]
    registration_id: Option<String>,
    #[serde(rename = "tpm", skip_serializing_if = "Option::is_none")]
    tpm: Option<TpmAttestation>,
}

impl DeviceRegistration {
    /// Device registration.
    pub fn new() -> DeviceRegistration {
        DeviceRegistration {
            registration_id: None,
            tpm: None,
        }
    }

    pub fn set_registration_id(&mut self, registration_id: String) {
        self.registration_id = Some(registration_id);
    }

    pub fn with_registration_id(mut self, registration_id: String) -> DeviceRegistration {
        self.registration_id = Some(registration_id);
        self
    }

    pub fn registration_id(&self) -> Option<&String> {
        self.registration_id.as_ref()
    }

    pub fn reset_registration_id(&mut self) {
        self.registration_id = None;
    }

    pub fn set_tpm(&mut self, tpm: TpmAttestation) {
        self.tpm = Some(tpm);
    }

    pub fn with_tpm(mut self, tpm: TpmAttestation) -> DeviceRegistration {
        self.tpm = Some(tpm);
        self
    }

    pub fn tpm(&self) -> Option<&TpmAttestation> {
        self.tpm.as_ref()
    }

    pub fn reset_tpm(&mut self) {
        self.tpm = None;
    }
}

impl Default for DeviceRegistration {
    fn default() -> Self {
        DeviceRegistration::new()
    }
}

/// TpmAttestation : Attestation via TPM.

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct TpmAttestation {
    #[serde(rename = "endorsementKey")]
    endorsement_key: String,
    #[serde(rename = "storageRootKey", skip_serializing_if = "Option::is_none")]
    storage_root_key: Option<String>,
}

impl TpmAttestation {
    /// Attestation via TPM.
    pub fn new(endorsement_key: String) -> TpmAttestation {
        TpmAttestation {
            endorsement_key,
            storage_root_key: None,
        }
    }

    pub fn set_endorsement_key(&mut self, endorsement_key: String) {
        self.endorsement_key = endorsement_key;
    }

    pub fn with_endorsement_key(mut self, endorsement_key: String) -> TpmAttestation {
        self.endorsement_key = endorsement_key;
        self
    }

    pub fn endorsement_key(&self) -> &String {
        &self.endorsement_key
    }

    pub fn set_storage_root_key(&mut self, storage_root_key: String) {
        self.storage_root_key = Some(storage_root_key);
    }

    pub fn with_storage_root_key(mut self, storage_root_key: String) -> TpmAttestation {
        self.storage_root_key = Some(storage_root_key);
        self
    }

    pub fn storage_root_key(&self) -> Option<&String> {
        self.storage_root_key.as_ref()
    }

    pub fn reset_storage_root_key(&mut self) {
        self.storage_root_key = None;
    }
}

/// TpmRegistrationResult : TPM registration result.

#[derive(Debug, Serialize, Deserialize)]
pub struct TpmRegistrationResult {
    #[serde(rename = "authenticationKey", skip_serializing_if = "Option::is_none")]
    authentication_key: Option<String>,
}

impl TpmRegistrationResult {
    /// TPM registration result.
    pub fn new() -> TpmRegistrationResult {
        TpmRegistrationResult {
            authentication_key: None,
        }
    }

    pub fn set_authentication_key(&mut self, authentication_key: String) {
        self.authentication_key = Some(authentication_key);
    }

    pub fn with_authentication_key(mut self, authentication_key: String) -> TpmRegistrationResult {
        self.authentication_key = Some(authentication_key);
        self
    }

    pub fn authentication_key(&self) -> Option<&String> {
        self.authentication_key.as_ref()
    }

    pub fn reset_authentication_key(&mut self) {
        self.authentication_key = None;
    }
}

impl Default for TpmRegistrationResult {
    fn default() -> Self {
        TpmRegistrationResult::new()
    }
}
