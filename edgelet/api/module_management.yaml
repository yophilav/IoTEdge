swagger: '2.0'
schemes:
  - http
info:
  title: IoT Edge Module Management API
  version: 1.0.0
tags:
  - name: Module
    x-displayName: Modules
    description: |
      Create and manage modules.
  - name: Identity
    x-displayName: Identities
    description: |
      Create and manage module identity.
paths:
  /modules:
    get:
      tags:
        - Module
      summary: List modules.
      produces:
        - application/json
      description: |
        This returns the list of currently running modules and their statuses.
      operationId: ListModules
      parameters:
        - $ref: '#/parameters/api-version'
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/ModuleList'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Module
      summary: Create module.
      operationId: CreateModule
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/api-version'
        - in: body
          name: module
          required: true
          schema:
            $ref: '#/definitions/ModuleSpec'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/ModuleSpec'
        '409':
          description: Conflict. Returned if module already exists.
          schema:
            $ref: '#/definitions/ErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/modules/{name}':
    get:
      tags:
        - Module
      summary: Get a module's status.
      operationId: GetModule
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/api-version'
        - in: path
          name: name
          description: The name of the module to get. (urlencoded)
          required: true
          type: string
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/ModuleDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Module
      summary: Update a module.
      operationId: UpdateModule
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/api-version'
        - in: path
          name: name
          description: The name of the module to update. (urlencoded)
          required: true
          type: string
        - in: body
          name: module
          required: true
          schema:
            $ref: '#/definitions/ModuleSpec'
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/ModuleDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Module
      summary: Delete a module.
      operationId: DeleteModule
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/api-version'
        - in: path
          name: name
          description: The name of the module to delete. (urlencoded)
          required: true
          type: string
      responses:
        '200':
          description: Ok
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/modules/{name}/start':
    post:
      tags:
        - Module
      summary: ''
      operationId: StartModule
      parameters:
        - $ref: '#/parameters/api-version'
        - in: path
          name: name
          description: The name of the module to start. (urlencoded)
          required: true
          type: string
      responses:
        '204':
          description: Ok
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/modules/{name}/stop':
    post:
      tags:
        - Module
      summary: ''
      operationId: StopModule
      parameters:
        - $ref: '#/parameters/api-version'
        - in: path
          name: name
          description: The name of the module to stop. (urlencoded)
          required: true
          type: string
      responses:
        '204':
          description: Ok
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/modules/{name}/restart':
    post:
      tags:
        - Module
      summary: ''
      operationId: RestartModule
      parameters:
        - $ref: '#/parameters/api-version'
        - in: path
          name: name
          description: The name of the module to restart. (urlencoded)
          required: true
          type: string
      responses:
        '204':
          description: Ok
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'

  '/identities/':
    get:
      tags:
        - Identity
      summary: List identities.
      produces:
        - application/json
      description: |
        This returns the list of current known idenities.
      operationId: ListIdentities
      parameters:
        - $ref: '#/parameters/api-version'
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/IdentityList'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Identity
      summary: 'Create an identity.'
      operationId: CreateIdentity
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/api-version'
        - in: body
          name: identity
          required: true
          schema:
            $ref: '#/definitions/Identity'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Identity'
        '409':
          description: Conflict. Returned if module already exists.
          schema:
            $ref: '#/definitions/ErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/identities/{name}':
    delete:
      tags:
        - Identity
      summary: Delete an identity.
      operationId: DeleteIdentity
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/api-version'
        - in: path
          name: name
          description: The name of the identity to delete. (urlencoded)
          required: true
          type: string
      responses:
        '200':
          description: Ok
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
definitions:
  ModuleList:
    type: object
    properties:
      modules:
        type: array
        items:
          $ref: '#/definitions/ModuleDetails'
  ModuleDetails:
    type: object
    properties:
      id:
        type: string
        description: System generated unique identitier.
        example: happy_hawking
      name:
        type: string
        description: The name of the module.
        example: edgeHub
      type:
        type: string
        description: The type of a module.
        example: docker
      config:
        $ref: '#/definitions/Config'
      status:
        $ref: '#/definitions/Status'
  ModuleSpec:
    type: object
    properties:
      name:
        type: string
        description: The name of a the module.
        example: edgeHub
      type:
        type: string
        example: docker
      config:
        $ref: '#/definitions/Config'
  Config:
    type: object
    properties:
      settings:
        type: object
        example:
          image: "microsoft/azureiotedge-hub:1.0"
          createOptions:
            HostConfig:
              PortBindings:
                "22/tcp":
                  - HostPort: "11022"
      env:
        type: array
        items:
          $ref: '#/definitions/EnvVar'
  Status:
    type: object
    properties:
      startTime:
        type: string
        format: date-time
      exitStatus:
        $ref: '#/definitions/ExitStatus'
      runtimeStatus:
        $ref: '#/definitions/RuntimeStatus'
  EnvVar:
    type: object
    properties:
      key:
        type: string
        example: the_key
      value:
        type: string
        example: the_value
  ExitStatus:
    type: object
    properties:
      exitTime:
        type: string
        format: date-time
      statusCode:
        type: string
    example:
      exitTime: '2018-04-03T09:31:00.000Z'
      statusCode: '101'
  RuntimeStatus:
    type: object
    properties:
      status:
        type: string
      description:
        type: string
    example:
      status: the status
      description: the description

  IdentityList:
    type: object
    properties:
      identities:
        type: array
        items:
          $ref: '#/definitions/Identity'
  Identity:
    type: object
    properties:
      id:
        type: string
        example: "hub.azure-devices.net/devices/{deviceId}/modules/{moduleId}"

  ErrorResponse:
    type: object
    properties:
      message:
        type: string

parameters:
  api-version:
    name: api-version
    in: query
    description: The version of the API.
    required: true
    type: string
    default: '2018-06-28'