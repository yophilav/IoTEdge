steps:
- pwsh: |
    # Unfortunately there is no way to create a variable name (as a string) in pwsh, pass that to DevOps pipeline, and have it evaluates the value of the variable
    # Since we know the variable names, we can hard-code variables name, and access them this way.
    # This list must have the same version ordering as base-image-config.yaml
    $versionTags = New-Object System.Collections.ArrayList
    $versionTags.AddRange((
      "$(edgeAgentTagVersion)",
      "$(edgeHubTagVersion)",
      "$(moduleTagVersion)",
      "$(fullModuleTagVersion)"
    ));

    echo $versionTags
    echo "dep = $[dependencies.linux_arm64.outputs['edgeAgentTagVersion']]"

    $scriptPath = "$(Build.SourcesDirectory)/scripts/linux/createArmBase.sh"
    $info = '$(serialize_info)' | ConvertFrom-Json
    foreach ($each in $info)
    {
      # $buildCommand = "sh -c $scriptPath -d $($each.Item1.ToString()) -i $($each.Item2.ToString()) -v "$($each.Item3.ToString())Version" "
      echo "Command: $buildCommand"
      # BEARWASHERE -- Don't run this unless you really want to release.
      # $buildCommand
    }
  displayName: Build and Publish Base Images
  env:
    edgeAgentTagVersion: $(edgeAgentTagVersion)
    edgeHubTagVersion: $(edgeHubTagVersion)
    moduleTagVersion: $(moduleTagVersion)
    fullModuleTagVersion: $(fullModuleTagVersion)