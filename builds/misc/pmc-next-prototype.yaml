trigger: none
pr: none

variables:
  DisableDockerDetector: true

stages:
  - stage: PublishArtifact
    displayName: Publish Artifacts
    jobs:
    - job: downloadArtifacts
      displayName: Release Agent Setup
      strategy:
        matrix:
          Ubuntu2004-amd64:
            pool_name: 'Azure-IoT-Edge-1ES-Hosted-Linux'
            agent_demands: 'ImageOverride -equals agent-aziotedge-ubuntu-20.04-msmoby'
            os: ubuntu20.04
            arch: amd64
            ext: deb
            artifactName: iotedged-ubuntu20.04-amd64
            identityServiceArtifactName: packages_ubuntu-20.04_amd64
            identityServicePackageFilter: aziot-identity-service_*_amd64.deb
            # identityServicePackageFilter: aziot-identity-service_*_amd64.deb
            # Proper  name: aziot-identity-service_1.4.0~dev-1_amd64.deb
      pool:
        name: $(pool_name)
        demands:
        - $(agent_demands)
      steps:
      - checkout: self
      - script: |
          #BEARWASHERE -- Pipx needs python3.7+; current version of python is 3.11!
          sudo add-apt-repository -y ppa:deadsnakes/ppa
          sudo apt-get update -y
          sudo apt-get install -y python3.11 python3.11-venv

          echo "update-alternatives --install: "
          sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 2
          echo "update-alternatives --set: "
          sudo update-alternatives --set python3 /usr/bin/python3.11
          echo ""

          echo "curl:"
          curl -sS https://bootstrap.pypa.io/get-pip.py | python3
          echo ""

          echo "pipx"
          python3 -m pip install --user pipx
          python3 -m pipx ensurepath
          export PATH=$PATH:$HOME/.local/bin
          python3 -m pip install --user -U pipx

          echo "which pipx"
          which pipx
          echo ""

          echo "Install pmc"
          pipx install --index-url https://packages.microsoft.com/pmc-cli/simple/ "pmc-cli>0.1.0"
          echo ""

          #----------------------- OLD stuff

          #sudo apt-get install -y python3 python3-pip python3-venv

          # Enable pip
          #python3 -m pip install --user --upgrade pip

          # record installed version
          #echo "Installed pipe version: "
          #python3 -m pip --version
          #echo ""
          
          # Install pip
          #echo "Installing pipx"
          #python3 -m pip install --user pipx
          #python3 -m pipx ensurepath
          #export PATH=$PATH:$HOME/.local/bin
          #echo "Finished installing pipx"
          #echo ""

          #echo "Install pmc"
          #pipx install --index-url https://packages.microsoft.com/pmc-cli/simple/ "pmc-cli>=0.1.0"
          #echo ""

          # Download artifact
          #echo "Downloading IIS artifact"
          #wget "https://github.com/Azure/azure-iotedge/releases/download/1.4.9/aziot-identity-service_1.4.3-1_ubuntu20.04_amd64.deb" -O "$(System.ArtifactsDirectory)/aziot-identity-service_1.4.3-1_ubuntu20.04_amd64.deb"
          #echo ""
          #echo "Finished downloading IIS artifact"
          #ls -la "$(System.ArtifactsDirectory)"
        name: SetupAgent
        displayName: Setup Agent

      - task: PublishBuildArtifacts@1
        displayName: Publish error logs
        inputs:
          PathtoPublish: '/home/cloudtest/.local/pipx/logs'
          ArtifactName: 'pipxLogs'
        condition: succeededOrFailed()

      - task: AzureCLI@2
        inputs:
          azureSubscription: $(az.subscription)
          scriptType: bash
          scriptLocation: inlineScript
          arguments: -p $(os) -w $(System.ArtifactsDirectory) -d $(System.ArtifactsDirectory)/$(artifactName) -s $(package-server-name)
          inlineScript: |
            #Download Secrets - Requires az login and proper subscription to be selected
            WDIR="$HOME/.config/pmc"
            if [[ ! -d $WDIR ]]; then
                echo "Creating PMC directory: $WDIR"
                mkdir -p $WDIR
            fi
            CERT_FILE="$WDIR/private-key.pem"
            SETTING_FILE="$WDIR/settings.toml"

            echo "Downloading PMC prod cert: $CERT_FILE"
            az keyvault secret download --vault-name iotedge-packages -n private-key-pem -f $CERT_FILE
            echo "Downloading PMC setting file: $SETTING_FILE"
            az keyvault secret download --vault-name iotedge-packages -n pmc-v4-settings -f $SETTING_FILE

            #Replace Server Name and Absolute Path of Private-key.pem and replace json
            echo "Config PMC:"
            sed -i -e "s@PROD_CERT_PATH@$CERT_FILE@g" "$SETTING_FILE"
            cat $SETTING_FILE
        displayName: Certificate Setup

      - script: |
          pmc repo list
        name: repolist
        displayName: Repo List

