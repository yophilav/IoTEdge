trigger: none
pr: none

variables:
  DisableDockerDetector: true

stages:
  - stage: PublishArtifact
    displayName: Publish Artifacts
    jobs:
    - job: downloadArtifacts
      displayName: Release Agent Setup
      strategy:
        matrix:
          Ubuntu2004-amd64:
            pool_name: 'Azure-IoT-Edge-1ES-Hosted-Linux'
            agent_demands: 'ImageOverride -equals agent-aziotedge-ubuntu-20.04-msmoby'
            os: ubuntu20.04
            arch: amd64
            ext: deb
            artifactName: iotedged-ubuntu20.04-amd64
            identityServiceArtifactName: packages_ubuntu-20.04_amd64
            identityServicePackageFilter: aziot-identity-service_*_amd64.deb
            # identityServicePackageFilter: aziot-identity-service_*_amd64.deb
            # Proper  name: aziot-identity-service_1.4.0~dev-1_amd64.deb
      pool:
        name: $(pool_name)
        demands:
        - $(agent_demands)
      steps:
      - checkout: self
      - script: |
          # Download artifact
          echo "Downloading IE artifact"
          wget "https://packages.microsoft.com/ubuntu/20.04/prod/pool/main/a/aziot-edge/aziot-edge_1.4.9-1_amd64.deb" -O "$(Build.ArtifactStagingDirectory)/aziot-edge_1.4.9~test-1_amd64.deb"
          wget "https://packages.microsoft.com/ubuntu/20.04/prod/pool/main/a/aziot-edge/aziot-edge_1.4.9-1_arm64.deb" -O "$(Build.ArtifactStagingDirectory)/aziot-edge_1.4.9~test-1_arm64.deb"
          echo ""
          echo "Finished downloading IE artifact"
          ls -la "$(Build.ArtifactStagingDirectory)"
        name: DownloadIE
        displayName: Setup Download IE

      - task: AzureCLI@2
        inputs:
          azureSubscription: $(az.subscription)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            apt-get install -y jq 
            #Download Secrets - Requires az login and proper subscription to be selected
            WDIR="$HOME/.config/pmc"
            if [[ ! -d $WDIR ]]; then
                echo "Creating PMC directory: $WDIR"
                mkdir -p $WDIR
            fi
            CERT_FILE="$WDIR/private-key.pem"
            SETTING_FILE="$WDIR/settings.toml"
            DOCKER_CERT_FILE="/root/.config/pmc/private-key.pem"

            echo "BEARWASHERE -- todo"
            az keyvault secret download --id 'https://edgereleasekv.vault.azure.net/secrets/iotedge-pmc-client-auth-prod' \
              --subscription IOT_EDGE_DEV1 \
              -o tsv \
              --query 'value' \
              --encoding base64 \
              -f ./testcert.pfx

            openssl pkcs12 -in ./testcert.pfx -out $CERT_FILE -nodes -passout pass:"" -passin pass:""
            cat $CERT_FILE
            echo "BEARWASHERE: <Done Downlooaind Cert>"

            #echo "Downloading PMC prod cert: $CERT_FILE"
            #az keyvault secret download --vault-name iotedge-packages -n private-key-pem -f $CERT_FILE
            echo "Downloading PMC setting file: $SETTING_FILE"
            az keyvault secret download --vault-name iotedge-packages -n pmc-v4-settings -f $SETTING_FILE

            #Replace Server Name and Absolute Path of Private-key.pem and replace json
            echo "Config PMC:"
            #sed -i -e "s@PROD_CERT_PATH@$CERT_FILE@g" "$SETTING_FILE"
            sed -i -e "s@PROD_CERT_PATH@$DOCKER_CERT_FILE@g" "$SETTING_FILE"
            cat $SETTING_FILE
        displayName: Certificate Setup

      # - task: PublishBuildArtifacts@1
      #   displayName: Publish cert
      #   inputs:
      #     PathtoPublish: '/home/cloudtest/.local/pipx/logs'
      #     ArtifactName: 'pipxLogs'
      #   condition: succeededOrFailed()
      - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@3
        displayName: ESRP Binary CodeSigning
        inputs:
          ConnectedServiceName: "aziotedge-pmc-v4-prod"
          FolderPath: '$(Build.ArtifactStagingDirectory)'
          Pattern: "*.deb"
          SessionTimeout: 20
          inlineOperation: |
            [
              {
                "KeyCode": "CP-450779-Pgp",
                "OperationCode": "LinuxSign",
                "ToolName": "sign",
                "ToolVersion": "1.0",
                "Parameters": {}
              }
            ]
          signConfigType: inlineSignParams

      - task: PublishBuildArtifacts@1
        displayName: Publish signed artifacts
        inputs:
          PathtoPublish: $(Build.ArtifactStagingDirectory)
          ArtifactName: 'iotedged'

      - script: |
          WDIR="$HOME/.config/pmc"
          if [[ ! -d $WDIR ]]; then
              echo "Creating PMC directory: $WDIR"
              mkdir -p $WDIR
          fi
          SETTING_FILE="$WDIR/settings.toml"

          cat $SETTING_FILE

          echo "BEARWASHERE - ls WDIR"
          ls $WDIR

          docker pull mcr.microsoft.com/pmc/pmc-cli

          # BEARWASHERE -- 
          # - Find a signed test package.  -> may need to figureout how to sign pkg
          # - Upload the package to be tested.
            #docker run --volume "$WDIR:/root/.config/pmc" --rm --network="host" mcr.microsoft.com/pmc/pmc-cli repo list
            #docker run --volume "/path/to/pmc:/root/.config/pmc" --volume "/path/to/packages:/packages" --rm --network="host" mcr.microsoft.com/pmc/pmc-cli package upload packages/mypkg.deb
            #docker run --volume "$WDIR:/root/.config/pmc" --volume "$(Build.ArtifactStagingDirectory):/packages" --rm --network="host" mcr.microsoft.com/pmc/pmc-cli package upload packages/*.deb
            #docker run --volume "$WDIR:/root/.config/pmc" --volume "$(Build.ArtifactStagingDirectory):/packages" --rm --network="host" mcr.microsoft.com/pmc/pmc-cli package upload packages/
          rm -f "$(Build.ArtifactStagingDirectory)*.md"
          output=$(docker run --volume "$WDIR:/root/.config/pmc" --volume "$(Build.ArtifactStagingDirectory):/packages" --rm --network="host" mcr.microsoft.com/pmc/pmc-cli package upload packages/)
          packageIds=$(echo $output | jq '.[]."id"' | tr '\n' ' ' | tr -d '"')
          idList=""; for id in $packageIds; do idList=$id','$idList; echo $idList; done; idList=${idList:0:-1}
          docker run --volume "$WDIR:/root/.config/pmc" --rm --network="host" mcr.microsoft.com/pmc/pmc-cli --add-packages $idList "microsoft-ubuntu-focal-prod-apt" "1.4.9"

            # list=""; for file in $(find $PDIR -name '*.deb' -o -name '*.rpm' -type f | grep -oP "[^/]*$"); do list=packages/$file','$list; echo $list; done; list=${list:0:-1}

            # docker run --volume "$WDIR:/root/.config/pmc" --volume "$(Build.ArtifactStagingDirectory):/packages" --rm --network="host" mcr.microsoft.com/pmc/pmc-cli repo list
            # docker run --volume "$WDIR:/root/.config/pmc" --volume "$(Build.ArtifactStagingDirectory):/packages" --rm --network="host" mcr.microsoft.com/pmc/pmc-cli repo list --offset 100
            # docker run --volume "$WDIR:/root/.config/pmc" --volume "$(Build.ArtifactStagingDirectory):/packages" --rm --network="host" mcr.microsoft.com/pmc/pmc-cli repo list --offset 200
            # docker run --volume "$WDIR:/root/.config/pmc" --volume "$(Build.ArtifactStagingDirectory):/packages" --rm --network="host" mcr.microsoft.com/pmc/pmc-cli repo list --offset 300
            # docker run --volume "$WDIR:/root/.config/pmc" --volume "$(Build.ArtifactStagingDirectory):/packages" --rm --network="host" mcr.microsoft.com/pmc/pmc-cli repo list --offset 400


        name: SetupDockerPMC
        displayName: Setup Docker PMC