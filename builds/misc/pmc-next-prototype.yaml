trigger: none
pr: none

variables:
  DisableDockerDetector: true

stages:
  - stage: PublishArtifact
    displayName: Publish Artifacts
    jobs:
    - job: downloadArtifacts
      displayName: Release Agent Setup
      strategy:
        matrix:
          Ubuntu2004-amd64:
            pool_name: 'Azure-IoT-Edge-1ES-Hosted-Linux'
            agent_demands: 'ImageOverride -equals agent-aziotedge-ubuntu-20.04-msmoby'
            os: ubuntu20.04
            arch: amd64
            ext: deb
            artifactName: iotedged-ubuntu20.04-amd64
            identityServiceArtifactName: packages_ubuntu-20.04_amd64
            identityServicePackageFilter: aziot-identity-service_*_amd64.deb
            # identityServicePackageFilter: aziot-identity-service_*_amd64.deb
            # Proper  name: aziot-identity-service_1.4.0~dev-1_amd64.deb
      pool:
        name: $(pool_name)
        demands:
        - $(agent_demands)
      steps:
      - checkout: self
      - script: |
          # Download artifact
          echo "Downloading IE artifact"
          wget "https://packages.microsoft.com/ubuntu/20.04/prod/pool/main/a/aziot-edge/aziot-edge_1.4.9-1_amd64.deb" -O "$(Build.ArtifactStagingDirectory)/aziot-edge_1.4.9-1_amd64.deb"
          echo ""
          echo "Finished downloading IE artifact"
          ls -la "$(Build.ArtifactStagingDirectory)"
        name: DownloadIE
        displayName: Setup Download IE

      - task: AzureCLI@2
        inputs:
          azureSubscription: $(az.subscription)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            #Download Secrets - Requires az login and proper subscription to be selected
            WDIR="$HOME/.config/pmc"
            if [[ ! -d $WDIR ]]; then
                echo "Creating PMC directory: $WDIR"
                mkdir -p $WDIR
            fi
            CERT_FILE="$WDIR/private-key.pem"
            SETTING_FILE="$WDIR/settings.toml"

            echo "BEARWASHERE -- todo"
            az keyvault secret download --id 'https://edgereleasekv.vault.azure.net/secrets/iotedge-pmc-client-auth-prod' \
              --subscription IOT_EDGE_DEV1 \
              -o tsv \
              --query 'value' \
              --encoding base64 \
              -f ./testcert.pfx

            openssl pkcs12 -in ./testcert.pfx -out $CERT_FILE -nodes -passout pass:"" -passin pass:""
            cat $CERT_FILE
            echo "BEARWASHERE: <Done Downlooaind Cert>"

            #echo "Downloading PMC prod cert: $CERT_FILE"
            #az keyvault secret download --vault-name iotedge-packages -n private-key-pem -f $CERT_FILE
            echo "Downloading PMC setting file: $SETTING_FILE"
            az keyvault secret download --vault-name iotedge-packages -n pmc-v4-settings -f $SETTING_FILE

            #Replace Server Name and Absolute Path of Private-key.pem and replace json
            echo "Config PMC:"
            sed -i -e "s@PROD_CERT_PATH@$CERT_FILE@g" "$SETTING_FILE"
            cat $SETTING_FILE
        displayName: Certificate Setup

      # - task: PublishBuildArtifacts@1
      #   displayName: Publish cert
      #   inputs:
      #     PathtoPublish: '/home/cloudtest/.local/pipx/logs'
      #     ArtifactName: 'pipxLogs'
      #   condition: succeededOrFailed()
      - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@3
        displayName: ESRP Binary CodeSigning
        inputs:
          ConnectedServiceName: "aziotedge-pmc-v4-prod"
          FolderPath: '$(Build.ArtifactStagingDirectory)'
          Pattern: "*.deb"
          SessionTimeout: 20
          inlineOperation: |
            [
              {
                "KeyCode": "CP-450779-Pgp",
                "OperationCode": "LinuxSign",
                "ToolName": "sign",
                "ToolVersion": "1.0",
                "Parameters": {}
              }
            ]
          signConfigType: inlineSignParams
      - script: |
          # Workaround to install a python module for all users
          sudo su
          cd ~
          umask 022

          # Install AzCli cuz it's required by the python modules
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

          #BEARWASHERE -- Pipx needs python3.7+; current version of python is 3.11. That doesn't work because bdist_wheel  can't compile with python11
          # Downgrading to python3.10
          sudo add-apt-repository -y ppa:deadsnakes/ppa
          sudo apt-get update -y
          sudo apt-get install -y python3.10 python3.10-dev python3.10-venv pkg-config

          echo "update-alternatives --install: "
          sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 2
          echo "update-alternatives --set: "
          sudo update-alternatives --set python3 /usr/bin/python3.10
          echo ""

          echo "Installing pip"
          curl -sS https://bootstrap.pypa.io/get-pip.py | python3
          export PATH=$PATH:$HOME/.local/bin
          echo ""

          PMC_REQ="
            anyio==3.6.2
            certifi==2019.11.28
            chardet==3.0.4
            cffi==1.15.1
            Click==7.1.1
            cryptography>=38.0.0
            h11==0.12.0
            httpcore==0.15.0
            httpx==0.23.0
            idna==2.8
            msal==1.19.0
            pycparser==2.19
            pydantic==1.10.2
            PyJWT==1.7.1
            pyOpenSSL==22.1.0
            requests==2.22.0
            rfc3986==1.5.0
            sniffio==1.3.0
            tomli==2.0.1
            tomli-w==1.0.0
            typer==0.6.1
            urllib3==1.25.8
          "

          echo "Install pip requirements"
          echo "$PMC_REQ" > requirements.txt
          python3 -m pip install -r requirements.txt

          echo "Install pmc"
          pip install --extra-index-url https://packages.microsoft.com/pmc-cli/simple/ "pmc-cli>=0.3.1" --python python3.10
          echo ""

          echo "pip list"
          pip --version
          python3 -m pip --version
          pip list
          echo "<TheEnd>"
          echo ""
          #----------------------- OLD stuff
        name: SetupPython
        displayName: Setup Python & PMC
      - script: |
          export PATH=$PATH:$HOME/.local/bin
          # pmc repo list
          # pmc repo list --offset 100
          # pmc repo list --offset 200
          # pmc repo list --offset 300
          # pmc repo list --offset 400

          echo "BEARWASHERE"
          # Look up "prod-apt" for relavant repo name
          # REPO_NAME="microsoft-ubuntu-focal-prod-apt"
          # pmc package deb list --repo $REPO_NAME

          # Upload a package
          pmc package upload "$(Build.ArtifactStagingDirectory)/aziot-edge_1.4.9-1_amd64.deb"
          # pmc --id-only package upload $FILE

          # Add one or more packages to a repo
          #pmc repo package update --add-packages $PKG_ID,... $REPO_MAME [$RELEASE]

          # Remove one or more packages from a repo
          #pmc repo package update --remove-packages $PKG_ID,... $REPO_NAME [$RELEASE]

          

        name: repolist
        displayName: Repo List

